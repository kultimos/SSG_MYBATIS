<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- Mapper接口对应映射文件
    mapper接口和映射文件要保持两个一致
    1.mapper接口全类名和映射文件namespace一致
    2.mapper接口的方法名和映射文件sql的id保持一致
-->
<mapper namespace="com.kul.mapper.DynamicSQLMapper">

<!--  这里的1=1是为了避免一些特殊情况导致where 和 and 相连  -->
    <select id="getEmpByConditionOne" parameterType="Emp" resultMap="com.kul.mapper.EmpMapper.empResultMap">
        select * from t_emp where 1=1
        <if test="eid != null and eid != ''">
            and eid=#{eid}
        </if>
        <if test="age != null and age != ''">
            and age=#{age}
        </if>
        <if test="sex != null and sex != ''">
            and sex=#{sex}
        </if>
        <if test="email != null and email != ''">
            and email=#{email}
        </if>
        <if test="empName != null and empName != ''">
            and emp_name=#{empName}
        </if>
    </select>


<!--  where标签:
      当where标签中有内容时,会自动生成where关键字,并且将内容前多余的and或or去掉
      当where标签中没有内容时,不会生成where关键字
      需要注意的是,1.where标签中只能有if标签,不能有其他标签 2.where标签只能去掉第一个多余的and或or,不能去掉其他的,若and或or写在后面,则不会去掉

-->
    <select id="getEmpByConditionTwo" parameterType="Emp" resultMap="com.kul.mapper.EmpMapper.empResultMap">
        select * from t_emp
        <where>
            <if test="eid != null and eid != ''">
                and eid=#{eid}
            </if>
            <if test="age != null and age != ''">
                and age=#{age}
            </if>
            <if test="sex != null and sex != ''">
                and sex=#{sex}
            </if>
            <if test="email != null and email != ''">
                and email=#{email}
            </if>
            <if test="empName != null and empName != ''">
                and emp_name=#{empName}
            </if>
        </where>
    </select>


<!--  trim标签
      prefix/suffix: 将trim标签中的内容前面/后面加上指定的内容
      suffixOverrides/prefixOverrides: 将trim标签中的内容前面/后面指定的内容去掉
      注意:这里的添加和删除针对的是trim这个整体,即是在trim标签的最开始和最最后添加或删除指定内容,而不是trim标签中的每条内容都会被添加或删除指定内容
      可以理解为trim是在sql语句已经完全形成后,再根据配置的属性内容对整个sql语句进行添加或删除指定内容
      而当基础sql后没有任何内容时,trim标签跟where标签一样,不会有任何效果
-->
    <select id="getEmpByConditionThree" parameterType="Emp" resultMap="com.kul.mapper.EmpMapper.empResultMap">
        select * from t_emp
        <trim prefix="where" suffix="" prefixOverrides="" suffixOverrides="and|or"      >
            <if test="eid != null and eid != ''">
                 eid=#{eid} and
            </if>
            <if test="age != null and age != ''">
                 age=#{age}
            </if>
            <if test="sex != null and sex != ''">
                 sex=#{sex} and
            </if>
            <if test="email != null and email != ''">
                 email=#{email} and
            </if>
            <if test="empName != null and empName != ''">
                 emp_name=#{empName} and
            </if>
        </trim>
    </select>


<!--  这里的choose when otherwise是一套组合使用的标签,choose 和 otherwise并没有其他属性,只有when有test属性
      这里test的代码写法跟if标签一样
      但是代码运行时逻辑有很大区别,
      if标签是依次筛查每一个条件,如果当前条件满足,就会执行,然后继续筛查下一个条件
      而choose标签是依次筛查每一个条件,只要有一个条件满足,就不会在继续筛查下一个条件,代码筛查逻辑就终止了,就直接使用当前条件进行sql查询了,不会再去筛查其他条件了
      choose when otherwise可以理解为是 if else if else 的简化版,有一个满足就结束
      when至少要有一个;
      otherwise可以没有,至多只能有一个
 -->
    <select id="getEmpByChoose" resultMap="com.kul.mapper.EmpMapper.empResultMap">
        select * from t_emp
        <where>
            <choose>
                <when test="eid != null and eid != ''">
                   and eid=#{eid}
                </when>
                <when test="age != null and age != ''">
                    and sex=#{sex}
                </when>
                <when test="empName != null and empName != ''">
                    and emp_name=#{empName}
                </when>
                <otherwise>
                    did = 1
                </otherwise>
            </choose>
        </where>
    </select>

<!--  这里的注意点:
      collection的内容要跟我们mapper类中的@Param注解修饰的一致,这样才可以找到
      item表示的只是针对当前collection进行循环的每一个元素
-->
    <delete id="deleteMoreByArray" parameterType="arraylist">
        delete from t_emp where eid in
        <foreach collection="eids" item="eid" open="(" close=")" separator=",">
             #{eid}
        </foreach>
    </delete>

    <delete id="deleteMoreByOr">
        delete from t_emp
        <where>
            <foreach collection="eids" item="eid" separator="or">
                eid=#{eid}
            </foreach>
        </where>

    </delete>

</mapper>